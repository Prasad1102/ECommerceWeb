# Generated by Django 4.2.13 on 2024-06-24 11:09

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product_name', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('topwear', 'Topwear'), ('bottomwear', 'Bottomwear')], max_length=50)),
                ('category_gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=50)),
                ('sub_category', models.CharField(choices=[('shirt', 'Shirt'), ('tshirt', 'T-Shirt'), ('blouse', 'Blouse'), ('sweater', 'Sweater'), ('hoodie', 'Hoodie'), ('jacket', 'Jacket'), ('coat', 'Coat'), ('crop_top', 'Crop Top'), ('pants', 'Pants'), ('jeans', 'Jeans'), ('shorts', 'Shorts'), ('skirt', 'Skirt'), ('leggings', 'Leggings'), ('trousers', 'Trousers'), ('kurta', 'Kurta'), ('kurti', 'Kurti'), ('sherwani', 'Sherwani'), ('lehenga', 'Lehenga'), ('saree', 'Saree'), ('salwar_kameez', 'Salwar Kameez'), ('dhoti', 'Dhoti'), ('maxi_dress', 'Maxi Dress'), ('mini_dress', 'Mini Dress'), ('gown', 'Gown'), ('jumpsuit', 'Jumpsuit'), ('romper', 'Romper'), ('underwear', 'Underwear'), ('lingerie', 'Lingerie'), ('bras', 'Bras'), ('boxers', 'Boxers'), ('briefs', 'Briefs'), ('sports_bra', 'Sports Bra'), ('track_pants', 'Track Pants'), ('joggers', 'Joggers'), ('gym_shorts', 'Gym Shorts'), ('sports_tshirt', 'Sports T-Shirt'), ('sneakers', 'Sneakers'), ('sandals', 'Sandals'), ('boots', 'Boots'), ('heels', 'Heels'), ('flats', 'Flats'), ('loafers', 'Loafers')], max_length=50)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('size', models.CharField(choices=[('xs', 'XS'), ('s', 'S'), ('m', 'M'), ('l', 'L'), ('xl', 'XL'), ('xxl', 'XXL')], max_length=50)),
                ('image', models.ImageField(upload_to='product_images/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True)),
                ('first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
